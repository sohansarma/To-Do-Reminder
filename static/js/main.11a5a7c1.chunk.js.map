{"version":3,"sources":["Components/navigation.js","Action/toDoAction.js","type.js","Components/webNotif.js","Components/toDoListItems.js","Components/mainPage.js","App.js","serviceWorker.js","Reducer/toDoReducer.js","index.js"],"names":["Navigation","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","setState","toggle","state","react_default","a","createElement","className","Component","deleteReminder","id","type","window","React","makeIgnoredList","reminders","now","Date","Array","isArray","filter","f","dueDate","map","WebNotif","props","ignore","title","ignoreList","handleNotificationInterval","bind","assertThisInitialized","doTheNotificationThing","_this2","Notification","requestPermission","permission","interval","setInterval","clearInterval","point","slice","concat","bodyData","description","notification","body","console","log","navigator","vibrate","_this3","data","setSeconds","setMilliseconds","includes","check","Math","abs","ACCURACY","connect","TodoListItem","completeState","checked","e","reminder","index","key","onClick","contenteditable","onInput","event","target","value","onChange","onSubmitTitle","moment","format","updateReminders","MainPage","onSubmit","_this$state","addReminder","document","querySelectorAll","forEach","input","alert","handleChange","date","edit","style","marginBottom","placeholder","ref","react_datepicker_es","position","placeholderText","timeInputLabel","selected","dateFormat","showTimeInput","minDate","popperPlacement","popperModifiers","offset","enabled","preventOverflow","escapeWithReference","boundariesElement","clearReminders","toDoListItems","webNotif","App","navigation","mainPage","Boolean","location","hostname","match","action","random","reminded","arguments","length","undefined","read_cookie","toConsumableArray","bake_cookie","removeById","updateById","store","createStore","reducer","ReactDOM","render","es","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11a5a7c1.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\nimport '../style.css';\r\n\r\n\r\n\r\nclass Navigation extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\ttoggle: false,\r\n\t\t}\r\n\t}\r\n\r\n     handleToggle = () => {\r\n     \tthis.setState({toggle:!this.state.toggle});\r\n     }\r\n  \r\n\r\n\trender(){\r\n\t\treturn(\r\n               <div className=\"navigation d-flex justify-content-between\">\r\n                  <div className=\"logo\">TO-DO-LIST</div>\r\n                  {/*<div onClick={this.handleToggle}>\r\n                  {this.state.toggle ?\r\n                  \t\t<i className=\"material-icons toggle\">toggle_on</i>\r\n                  \t\t:\r\n                  \t\t<i className=\"material-icons toggle\">toggle_off</i>\r\n                  }\r\n                  </div>*/}\r\n               </div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navigation;","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS, UPDATE_REMINDERS } from '../type';\r\n\r\nexport const addReminder = ( title, description, dueDate) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        title,\r\n        description,\r\n        dueDate\r\n    }\r\n   /* console.log('-------------action in addReminder---------->', action);*/\r\n    return action;\r\n}\r\n\r\nexport const deleteReminder = (id) => {\r\n    const action = {\r\n        type: DELETE_REMINDER,\r\n        id\r\n    }\r\n    /*console.log('---------------deleting in actions---------->', action);*/\r\n    return action;\r\n}\r\n\r\nexport const clearReminders = () => {\r\n    const action = {\r\n        type: CLEAR_REMINDERS\r\n    }\r\n    return action;\r\n}\r\n\r\nexport const updateReminders = () => {\r\n    const action = {\r\n        type: UPDATE_REMINDERS\r\n    }\r\n    return action;\r\n}","export const ADD_REMINDER = 'ADD_REMINDER';\r\nexport const DELETE_REMINDER ='DELETE_REMINDER';\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';\r\nexport const UPDATE_REMINDERS = 'UPDATE_REMINDERS';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n//allow react dev tools work\r\nwindow.React = React;\r\nconst ACCURACY = 60000;\r\n\r\nfunction makeIgnoredList(reminders) {\r\n  const now = new Date();\r\n  if (!Array.isArray(reminders)) return [];\r\n  return reminders.filter(f => {\r\n      const dueDate = new Date(f.dueDate);\r\n      return dueDate - now < 0;\r\n  })\r\n  .map(f => f.id);\r\n}\r\n\r\nclass WebNotif extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ignore: true,\r\n      title: '',\r\n      ignoreList: makeIgnoredList(props.reminders)\r\n    };\r\n    this.handleNotificationInterval = this.handleNotificationInterval.bind(this);\r\n    this.doTheNotificationThing = this.doTheNotificationThing.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.Notification.requestPermission(permission => {\r\n      if(permission === 'granted') {\r\n        this.interval = setInterval(this.handleNotificationInterval, ACCURACY);\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.interval) clearInterval(this.interval);\r\n  }\r\n\r\n  doTheNotificationThing(point) {\r\n    const ignoreList = this.state.ignoreList.slice().concat(point.id);\r\n    const { title, description } = point;\r\n    const header = \"Hello\";\r\n    const bodyData = \"Your task \"+title+\" is due now\"\r\n    const notification = new window.Notification(header, { body: bodyData });\r\n    console.log(notification)\r\n    navigator.vibrate(500);\r\n    this.setState({\r\n      ignoreList,\r\n    })\r\n  }\r\n\r\n  handleNotificationInterval() {\r\n    const { reminders: data } = this.props;\r\n    const {\r\n      ignoreList,\r\n    } = this.state;\r\n    if (!data) return;\r\n    const now = new Date();\r\n    now.setSeconds(0);\r\n    now.setMilliseconds(0);\r\n    data.filter(f => !ignoreList.includes(f.id)).map(point => {\r\n      const { dueDate } = point;\r\n      const check = new Date(dueDate);\r\n      check.setSeconds(0);\r\n      check.setMilliseconds(0);\r\n      if (Math.abs(check - now) < ACCURACY * 2) {\r\n        this.doTheNotificationThing(point);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    reminders: state\r\n  }\r\n}\r\nexport default connect(mapStateToProps, {})(WebNotif);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { deleteReminder,updateReminders } from '../Action/toDoAction';\r\n\r\nclass TodoListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: false,\r\n      title: '',\r\n      description: ''\r\n    }\r\n  }\r\n\r\n  completeState = (id) => {\r\n    const { checked } = this.state;\r\n    if (checked) {\r\n      this.setState({\r\n        checked: null,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        checked: id,\r\n      })\r\n    }\r\n  }\r\n\r\n   deleteReminder = (id,e) => {\r\n    this.props.deleteReminder(id);\r\n  }\r\n \r\n  render () {\r\n    const { reminders } = this.props;\r\n    const { checked } = this.state;\r\n    return(\r\n            <div className=\"width\">\r\n        {\r\n          reminders.map((reminder,index) => {\r\n            return (\r\n              <div key={reminder.id}\r\n                   index={index} \r\n                   onClick={() => this.completeState(reminder.id)}\r\n                   className={checked === reminder.id ? \"d-flex list_container_checked flex-wrap justify-content-between\" : \"d-flex list_container flex-wrap justify-content-between\"}\r\n                  >\r\n                  <div key={reminder.id}>\r\n                    <div \r\n                       className={checked === reminder.id ? \"title_style_checked\" : \"title_style\"} \r\n                       contenteditable=\"true\"\r\n                       onInput={event => this.setState({title: event.target.value})}\r\n                       onChange={this.onSubmitTitle}\r\n                       >\r\n                        {reminder.title}\r\n                    </div>\r\n                    <div \r\n                         className={checked === reminder.id ? \"desc_style_checked\" : \"desc_style\" }\r\n                         contenteditable=\"true\"\r\n                         onInput={event => this.setState({description: event.target.value})}\r\n                       >\r\n                        {reminder.description}\r\n                    </div>\r\n                    {reminder.dueDate && \r\n                      <div className=\"d-flex\">\r\n                        <div className=\"Reminder_text d-flex align-items-center\">Reminder set for</div>\r\n                        <div className=\"Date_style\">{moment(new Date(reminder.dueDate)).format('lll')}</div>\r\n                      </div>\r\n                    }\r\n                    \r\n                  </div>\r\n                  <div \r\n                    className=\"d-flex align-items-center\"\r\n                    onClick={() => this.deleteReminder(reminder.id)}\r\n                  >\r\n                  <i className=\"material-icons delete_icon \">\r\n                  delete_forever\r\n                  </i>\r\n                  </div>\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    reminders: state\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { updateReminders,deleteReminder })(TodoListItem);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addReminder, deleteReminder, clearReminders } from '../Action/toDoAction';\r\nimport moment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport WebNotif from './webNotif';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport TodoListItem from './toDoListItems'\r\n\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      description: '',\r\n      dueDate: '',\r\n      edit: false,\r\n      checked: false\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit = (event) => {\r\n    const { title, description, dueDate } = this.state;\r\n    if(title && description){\r\n         this.props.addReminder( title,description,dueDate );\r\n         this.setState({title: '', description: '', dueDate: ''});\r\n         let inputFields = document.querySelectorAll('input');\r\n         inputFields.forEach(input => input.value = '');\r\n    }else{\r\n         alert(\"You need to have a task and description\");\r\n    }\r\n  }\r\n\r\n\r\n   handleChange = (date) => {\r\n    this.setState({\r\n      dueDate: date\r\n    });\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"body_style\">\r\n      <div className=\"\">\r\n      <div style={{marginBottom: '20px'}} className= \"d-flex justify-content-center align-items-center\">\r\n             <form \r\n               className=\"form-inline margin\" \r\n               onChange={event => this.setState({title: event.target.value})}>\r\n                 <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Add a new todo...\"\r\n                  />\r\n            </form>\r\n            <form \r\n              className=\"form-inline margin\" \r\n              onChange={event => this.setState({description: event.target.value})}>\r\n                <input \r\n                    type=\"text\" \r\n                    ref=\"itemName\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Add a description...\"\r\n                 />\r\n            </form>\r\n            <div className=\"\">\r\n            <DatePicker\r\n                position=\"bottom\"\r\n                className=\"date_container margin\"\r\n                placeholderText='Set Reminder'\r\n                timeInputLabel=\"Time:\"\r\n                selected={this.state.dueDate}\r\n                onChange={this.handleChange}\r\n                dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                showTimeInput\r\n                minDate={new Date()}\r\n                popperPlacement=\"top-end\"\r\n                popperModifiers={{\r\n                  offset: {\r\n                    enabled: true,\r\n                    offset: '5px, 10px'\r\n                  },\r\n                  preventOverflow: {\r\n                    enabled: true,\r\n                    escapeWithReference: false, // force popper to stay in viewport (even when input is scrolled out of view)\r\n                    boundariesElement: 'viewport'\r\n                  }\r\n                }}\r\n            />\r\n            </div>\r\n            <div className=\"add_button d-flex align-items-center justify-content-center\" onClick={this.onSubmit}>Add</div>\r\n            <div\r\n            className=\"d-flex align-items-center justify-content-center botton_style_remove\"\r\n            onClick={() => this.props.clearReminders()}\r\n          >\r\n            Clear reminders\r\n          </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-center\">\r\n         {/* { this.renderReminders() }*/}\r\n          <TodoListItem />\r\n          </div>\r\n          <WebNotif />\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    reminders: state\r\n  }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    addReminder,\r\n    deleteReminder,\r\n    clearReminders })(MainPage);","import React from 'react';\nimport Navigation from './Components/navigation';\nimport MainPage from './Components/mainPage';\nimport './App.css';\nimport WebNotif from './Components/webNotif';\n\nfunction App() {\n  return (\n    <div className=\"\">\n         <Navigation />\n         <MainPage />\n          <WebNotif />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS, UPDATE_REMINDERS} from '../type';\r\nimport { bake_cookie, read_cookie } from 'sfcookies';\r\n\r\nconst reminder = (action) => {\r\n  let { title, description, dueDate } = action;\r\n  return {\r\n    id: Math.random(),\r\n    title,\r\n    description,\r\n    dueDate,\r\n    reminded: false,\r\n  }\r\n}\r\n\r\n//Removes data\r\nconst removeById  = (state = [], id) => {\r\n  const reminders = state.filter(reminder => reminder.id !== id);\r\n  /*console.log('new reduced reminders', reminders);*/\r\n  return reminders;\r\n}\r\n\r\nconst updateById  = (state = [], id) => {\r\n  const reminders = state.filter(reminder => reminder.id !== id);\r\n /* console.log('new updated reminders', reminders);*/\r\n  return reminders;\r\n}\r\n\r\n\r\nconst reminders = (state = [], action) => {\r\n  let reminders = null;\r\n  state = read_cookie('reminders');\r\n  \r\n  switch(action.type) {\r\n   \r\n    case ADD_REMINDER:\r\n      reminders = [...state, reminder(action)];\r\n      bake_cookie('reminders', reminders);\r\n      return reminders;\r\n    \r\n    case DELETE_REMINDER:\r\n      reminders = removeById(state, action.id);\r\n      bake_cookie('reminders', reminders);\r\n      return reminders;\r\n    \r\n    case CLEAR_REMINDERS:\r\n      reminders = [];\r\n      bake_cookie('reminders', reminders);\r\n      return reminders;\r\n\r\n    case UPDATE_REMINDERS:\r\n       reminders = updateById(state, action.id);\r\n       bake_cookie('reminders', reminders);\r\n       return reminders;\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './Reducer/toDoReducer';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}